{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","ticTacToeCellsArr","useState","Array","fill","cells","setCells","xToggle","setXtoggle","restartGame","useCallback","winner","cellsArr","validationArr","index","length","validSolutionArr","i","arrPoss","undefined","getWinner","onClickHandler","event","newCells","className","onClick","map","value","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAuFeA,MApFf,WAAgB,IAiEOC,EAjER,EACaC,mBAASC,MAFN,GAEoCC,QADpD,mBACNC,EADM,KACCC,EADD,OAEiBJ,oBAAS,GAF1B,mBAENK,EAFM,KAEGC,EAFH,KAGPC,EAAcC,uBAAY,WAC9BJ,EAASH,MALkB,GAKYC,QACvCI,GAAW,KACV,IA6CGG,EA3CY,SAACC,GACjBA,EAAQ,YAAOA,GAcf,IAbA,IAAMC,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GAEP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GAEP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAQ,EAAGA,EAAQD,EAAcE,OAAQD,IAAS,CAOzD,IANA,IAAME,EAAmBH,EAAcC,GAKnCH,OAAM,EACDM,EAAI,EAAGA,EAAID,EAAiBD,OAAQE,IAAK,CAChD,IAAMC,EAAUF,EAAiBC,GACjC,GAAU,IAANA,GAKJ,GAAiC,qBAAtBL,EAASM,IAA4BP,IAAWC,EAASM,GAApE,CAGEP,OAASQ,EACT,YARAR,EAASC,EAASM,GAYtB,GAAIP,EACF,OAAOA,GAKES,CAAUf,GAEnBgB,EAAiB,SAACP,GACtB,OAAO,SAACQ,GACN,IAAMC,EAAQ,YAAOlB,GACjBM,GAAUY,EAAST,KAGvBS,EAAST,GAASP,EAAU,IAAM,IAClCD,EAASiB,GACTf,GAAYD,MAWhB,OACE,yBAAKiB,UAAU,OACb,uCAAab,GAAkB,IAC/B,4BAAQc,QAAShB,GAAjB,WACA,6BACA,yBAAKe,UAAU,UAZEvB,EAaFI,GAZjBJ,EAAiB,YAAOA,IACCyB,KAAI,SAACC,EAAOb,GACnC,OAAQ,yBAAKc,IAAG,sBAAiBd,GAASU,UAAU,OAAOC,QAASJ,EAAeP,IAASa,GAAgB,WC3D9FE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.25e1c394.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport './App.css';\nconst TIC_TAC_TOE_GRID_LIMIT = 9;\nfunction App() {\n  const [cells, setCells] = useState(Array(TIC_TAC_TOE_GRID_LIMIT).fill());\n  const [xToggle, setXtoggle] = useState(true);//start with x or not\n  const restartGame = useCallback(() => {\n    setCells(Array(TIC_TAC_TOE_GRID_LIMIT).fill());\n    setXtoggle(true);\n  }, []);\n\n  const getWinner = (cellsArr) => {\n    cellsArr = [...cellsArr];\n    const validationArr = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    for (let index = 0; index < validationArr.length; index++) {\n      const validSolutionArr = validationArr[index];\n      /* const [pos_1, pos_2, pos_3] = validationArr[index];\n      if (cellsArr[pos_1] && cellsArr[pos_1] === cellsArr[pos_2] && cellsArr[pos_2] === cellsArr[pos_3]) {\n        return cellsArr[pos_1];\n      } */\n      let winner;\n      for (let i = 0; i < validSolutionArr.length; i++) {\n        const arrPoss = validSolutionArr[i];\n        if (i === 0) {\n          winner = cellsArr[arrPoss];\n          continue;\n        }\n\n        if (typeof cellsArr[arrPoss] !== \"undefined\" && winner === cellsArr[arrPoss]) {\n          continue;\n        } else {\n          winner = undefined;\n          break;\n        }\n      }\n\n      if (winner) {\n        return winner;\n      }\n    }\n    return;\n  }\n  const winner = getWinner(cells);\n\n  const onClickHandler = (index) => {\n    return (event) => {\n      const newCells = [...cells];\n      if (winner || newCells[index]) {\n        return;\n      }\n      newCells[index] = xToggle ? \"X\" : \"O\";//x or o\n      setCells(newCells);\n      setXtoggle(!xToggle);\n    }\n  }\n\n  const renderCells = (ticTacToeCellsArr) => {\n    ticTacToeCellsArr = [...ticTacToeCellsArr];\n    return ticTacToeCellsArr.map((value, index) => {\n      return (<div key={`tic-tac-toe_${index}`} className=\"cell\" onClick={onClickHandler(index)}>{value ? value : \"\"}</div>);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <h3>Winner: {winner ? winner : \"\"}</h3>\n      <button onClick={restartGame}>restart</button>\n      <hr />\n      <div className=\"board\">\n        {renderCells(cells)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}